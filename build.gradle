plugins {
    id 'com.enonic.xp.app' version '2.0.0'
    id 'com.moowork.node' version '1.3.1'
}

app {
    name = "${appName}"
    displayName = "${appDisplayName}"
    vendorName = "${vendorName}"
    vendorUrl = "${vendorUrl}"
    systemVersion = "${xpVersion}"
}

dependencies {
    compile "com.enonic.xp:core-api:${xpVersion}"
    compile "com.enonic.xp:portal-api:${xpVersion}"
    compile 'org.apache.commons:commons-csv:1.8'

    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-io:${xpVersion}"
    include "com.enonic.lib:lib-thymeleaf:2.0.0-RC1"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.2"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.5.2"
    testImplementation "org.mockito:mockito-core:3.+"
    testRuntimeOnly "org.slf4j:slf4j-simple:1.7.30"

    //include "com.enonic.xp:lib-auth:${xpVersion}"
    //include "com.enonic.xp:lib-context:${xpVersion}"
    //include "com.enonic.xp:lib-i18n:${xpVersion}"
    //include "com.enonic.xp:lib-io:${xpVersion}"
    //include "com.enonic.xp:lib-mail:${xpVersion}"
    //include "com.enonic.xp:lib-repo:${xpVersion}"
    //include "com.enonic.xp:lib-websocket:${xpVersion}"
    //include "com.enonic.lib:lib-mustache:2.0.0"
    //include "com.enonic.lib:lib-util:2.0.0"
}

repositories {
    mavenLocal()
    jcenter()
    xp.enonicRepo()
}

node {
    download = true
    version '10.16.0'
}

task npmInstallForce( type: NpmTask ) {
    description = 'Update all project node dependencies'
    args = ['install', '--force']
}

task cleanNode( type: org.gradle.api.tasks.Delete ) {
    delete 'node_modules'
}

task clientWebpack( type: NodeTask, dependsOn: npmInstall ) {
    environment = ['NODE_ENV': nodeEnvironment()]
    args = ['--config', 'webpack.client.config.js', '--color', '--hide-modules']
    description = 'Build UI resources (js, css, etc).'
    inputs.dir 'src/main'
    outputs.dir "${buildDir}/resources/main"
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

processResources {
    include '**/*'
    exclude '**/.gitkeep'
    exclude '**/tsconfig.*.json'
    exclude '**/src/**'
    includeEmptyDirs false
}

jar {
    dependsOn += clientWebpack
}

jar.outputs.dir "${buildDir}/resources/main"

def nodeEnvironment()
{
    def environments = [prod: 'production', dev: 'development']
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}